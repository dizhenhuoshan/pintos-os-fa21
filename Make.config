# -*- makefile -*-

SHELL = /bin/sh

VPATH = $(SRCDIR)

# Binary utilities.
# If the host appears to be x86, use the normal tools.
# If it's x86-64 Linux, use the compiler and linker in 32-bit mode.
# If the cross-tools are installed as x86_64-elf-* or i386-elf-*, use those.
X86 = i.86\|pentium.*\|[pk][56]\|nexgen\|viac3\|6x86\|athlon.*\|i86pc
X86_64 = x86_64

TOOL_PREFIX =
CC_OPTS =
LD_OPTS =

ifeq (0, $(shell expr `uname -m` : '$(X86)'))
  ifneq ($(shell which x86_64-elf-gcc),)
    TOOL_PREFIX = x86_64-elf-
    CC_OPTS = -m32
    LD_OPTS = -melf_i386
  else ifneq ($(shell which i386-elf-gcc),)
    TOOL_PREFIX = i386-elf-
  else
    CC_OPTS = -m32
    LD_OPTS = -melf_i386
  endif
endif

CC = $(TOOL_PREFIX)gcc $(CC_OPTS)
LD = $(TOOL_PREFIX)ld $(LD_OPTS)
OBJCOPY = $(TOOL_PREFIX)objcopy

ifeq ($(strip $(shell command -v $(CC) 2> /dev/null)),)
$(warning *** Compiler ($(CC)) not found.  Did you set $$PATH properly?  Please refer to the Getting Started section in the documentation for details. ***)
endif

# Compiler and assembler invocation.
DEFINES =
WARNINGS = -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers -Wno-unused-parameter -Wno-nonnull-compare -Wno-frame-address
CFLAGS = -g -msoft-float -O0
CPPFLAGS = -nostdinc -I$(SRCDIR) -I$(SRCDIR)/lib
ASFLAGS = -Wa,--gstabs
LDFLAGS =
DEPS = -MMD -MF $(@:.o=.d)

# Turn off -fstack-protector, which we don't support.
ifeq ($(strip $(shell echo | $(CC) -fno-stack-protector -E - > /dev/null 2>&1; echo $$?)),0)
CFLAGS += -fno-stack-protector
endif

# Turn off --build-id in the linker, which confuses the Pintos loader.
ifeq ($(strip $(shell $(LD) --help | grep -q build-id; echo $$?)),0)
LDFLAGS += -Wl,--build-id=none
endif

%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS) $(CPPFLAGS) $(WARNINGS) $(DEFINES) $(DEPS)

%.o: %.S
	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) $(DEPS)
